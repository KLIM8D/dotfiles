"inoremap <expr><TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : neocomplete#start_manual_complete(),V
"endfunction,V
"    return !col || getline('.')[col - 1] =~ '\s',V
"    let col = col('.') - 1,V
"function! s:check_back_space(),V
"  return pumvisible() ? neocomplete#close_popup() : "\<CR>",V
  " For no inserting <CR> key.,V
  " return neocomplete#smart_close_popup() . "\<CR>",V
"function! s:my_cr_function(),V
f,v
http://www.howtogeek.com/howto/windows-vista/using-symlinks-in-windows-vista/,v
 function! s:check_back_space()let col = col('.') - 1return !col || getline('.')[col - 1] =~ '\s'endfunction,v
 inoremap <expr><TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : neocomplcache#start_manual_complete(),v
%s,v
,V
https://github.com/Shougo/neocomplete.vim,v
You can clone with HTTPS, SSH, Subversion, and other methods.Clone of Jeff Lanzarotta's bufexplorer from vim.orghttp://www.vim.org/scripts/script.php?script_id=42    3 commits    1 branch    0 releases    1 contributor    VimL 100%VimLbufexplorer /work on readmelatest commit d1dc1be409corntrace authored 3 years ago	doc 	clone version 7.2.8 	3 years ago	plugin 	clone version 7.2.8 	3 years ago	README.md 	work on readme 	3 years agoREADME.mdcreated byjeff lanzarottascript typeutilitydescriptionWith bufexplorer, you can quickly and easily switch between buffers by using the one of the default public interfaces:'\be' (normal open)  or '\bs' (force horizontal split open)  or '\bv' (force vertical split open) Once the bufexplorer window is open you can use the normal movement keys (hjkl) to move around and then use or to select the buffer you would like to open. If you would like to have the selected buffer opened in a new tab, simply press either or 't'. Please note that when opening a buffer in a tab, that if the buffer is already in another tab, bufexplorer can switch to that tab automatically for you if you would like. More about that in the supplied VIM help.Bufexplorer also offers various options including:    Display the list of buffers in various sort orders including:        Most Recently Used (MRU) which is the default        Buffer number        File name        File extension        Full file path name    Delete buffer from listFor more about options, sort orders, configuration options, etc. please see the supplied VIM help.install detailsSimply unzip bufexplorer.zip into a directory in your 'runtimepath', usually ~/.vim or c:\vimfiles, and restart Vim. This zip file contains plugin\bufexplorer.vim, and doc\bufexplorer.txt. See ':help add-local-help' on how to add bufexplorer.txt to vim's help system.NOTEVersion 7.0.12 and above will ONLY work with 7.0 and above of Vim.IMPORTANT: If you have a version prior to 7.1.2 that contains an autoload\bufexplorer.vim file, please REMOVE the autoload\bufexlorer.vim AND the plugin\bufexplorer.vim files before installing a new version.,V
https://github.com/kien/ctrlp.vim,v
/* strncmp: return < 0; if s < t, 0 if s == t, >0 if s > t */,V
You can clone with HTTPS, SSH, Subversion, and other methods.Clone of Jeff Lanzarotta's bufexplorer from vim.orghttp://www.vim.org/scripts/script.php?script_id=42    3 commits    1 branch    0 releases    1 contributor    VimL 100%VimLbufexplorer /work on readmelatest commit d1dc1be409corntrace authored 3 years ago	doc 	clone version 7.2.8 	3 years ago	plugin 	clone version 7.2.8 	3 years ago	README.md 	work on readme 	3 years agoREADME.mdcreated byjeff lanzarottascript typeutilitydescriptionWith bufexplorer, you can quickly and easily switch between buffers by using the one of the default public interfaces:'\be' (normal open)  or '\bs' (force horizontal split open)  or '\bv' (force vertical split open) Once the bufexplorer window is open you can use the normal movement keys (hjkl) to move around and then use or to select the buffer you would like to open. If you would like to have the selected buffer opened in a new tab, simply press either or 't'. Please note that when opening a buffer in a tab, that if the buffer is already in another tab, bufexplorer can switch to that tab automatically for you if you would like. More about that in the supplied VIM help.Bufexplorer also offers various options including:    Display the list of buffers in various sort orders including:        Most Recently Used (MRU) which is the default        Buffer number        File name        File extension        Full file path name    Delete buffer from listFor more about options, sort orders, configuration options, etc. please see the supplied VIM help.install detailsSimply unzip bufexplorer.zip into a directory in your 'runtimepath', usually ~/.vim or c:\vimfiles, and restart Vim. This zip file contains plugin\bufexplorer.vim, and doc\bufexplorer.txt. See ':help add-local-help' on how to add bufexplorer.txt to vim's help system.NOTEVersion 7.0.12 and above will ONLY work with 7.0 and above of Vim.IMPORTANT: If you have a version prior to 7.1.2 that contains an autoload\bufexplorer.vim file, please REMOVE the autoload\bufexlorer.vim AND the plugin\bufexplorer.vim files before installing a new version.,v
git@github.com:corntrace/bufexplorer.git,v
print User.select().where(password=md5("bar").hexdigest()).count(),v
void strncmp(char *s, char *t, int n){    },v
/* strcmp: return < 0; if s < t, 0 if s == t, >0 if s > t */int strcmp(char *s, char *t){    for (; *s == *t; s++, t++)        if (*s == '\0')            return 0;    return *s - *t;},v
void strcat(char *s, char *t){    while(*++s) /* (*++s != '\0') */        ;    while((*s++ = *t++))/* ((*s++ = *t++) != '\0') */         ;},v
#include <string.h>,V
    int i;,V
 int i;    char S1[20] = "Hello, World";    char S2[10] = "World";    i = strend(S1, S2);    printf("Found: %d\n", i);    return 0;,v
    },V
        s++;,V
        t++;,V
while(*++s)        ;,v
  int i;,V
  printf("String one is (%s)\n", S1);  printf("String two is (%s)\n", S2);,v
char S1[20] = "String One";  char S2[10] = "String Two";  printf("String one is (%s)\n", S1);  printf("String two is (%s)\n", S2);   strcat(S1, S2);  printf("The combined string is (%s)\n", S1);  return 0;,v
/* (*++s != '\0') */,v
    printf("%d\n", *s); ,V
        ++s;,V
void strcat(char *s, char *t){    while(*s++ != '\0')        ;   /* now copy until we run out of string to copy */  while('\0' != (*s = *t))  {    ++s;    ++t;  }     /*while((*s++ = *t++) != '\0')        ;*/},v
Exercise 5-3. ,v
/* strcat:  concatenate t to end of s; s must be big enough; pointer version */void strcat(char *s, char *t){  /* run through the destination string until we point at the terminating '\0' */   while('\0' != *s)  {    ++s;  }  /* now copy until we run out of string to copy */  while('\0' != (*s = *t))  {    ++s;    ++t;  }},v
/* now copy until we run out of string to copy */  while('\0' != (*s = *t))  {    ++s;    ++t;  },v
int main(void){  char S1[8192] = "String One";  char S2[8192] = "String Two";  printf("String one is (%s)\n", S1);  printf("String two is (%s)\n", S2);   strcat(S1, S2);  printf("The combined string is (%s)\n", S1);  return 0;},v
  implementation from chapter 2:,v
/ * strcat:  concatenate t to end of s; s must be big enough * /void strcat(char s[], char t[]){  int i, j;  i = j = 0;  while (s[i] != '\0')  / * find end of s * /    i++;  while ((s[i++] = t[j++]) != '\0')  / * copy t * /    ;}  Author : Bryan Williams ,v
/ * strcat:  concatenate t to end of s; s must be big enough * /,v
void strcat(char s[], char t[]){  int i, j;  i = j = 0;  while (s[i] != '\0')  / * find end of s * /    i++;  while ((s[i++] = t[j++]) != '\0')  / * copy t * /    ;},v
/* strcmp: return <0,21
/*  Exercise 5-3. Write a pointer version of the function strcat that we showed in                 Chapter 2: strcat(s,t) copies the string t to the end of s.  implementation from chapter 2:/ * strcat:  concatenate t to end of s; s must be big enough * /void strcat(char s[], char t[]){  int i, j;  i = j = 0;  while (s[i] != '\0')  / * find end of s * /    i++;  while ((s[i++] = t[j++]) != '\0')  / * copy t * /    ;}  Author : Bryan Williams */,v
/* strcmp: return < 0; if s < t, 0 if s == t, >0 if s > t */,v
float getfloat(int *pn){    int c, sign, firstPart;    while (isspace(c = getch()))        ;    if(!isdigit && c != EOF && c != '+' && c != '-' && c != '.') {        ungetch(c);        return 0;    }    if(c != '.') {        firstPart = c;        c = getch();    }    for(*pn = 0; isdigit(c); c = getch())        *pn = 10 * *pn + (c - '0');,v
https://twitter.com/MostTerrifying/status/376884873379598337/photo/1,v
transip.eu,v
let g:neocomplete#enable_auto_select = 1,v
    putchar(j);,V
int getint(int *pn){    int c, sign, found;    while (isspace(c = getch()))        ;    if (!isdigit(c) && c != EOF && c != '+' && c != '-') {        ungetch(c); /* it's not a number */        return 0;    }    sign = (c == '-') ? -1 : 1;    if (c == '+' || c == '-') {        c = getch();        found = 1;    }        if(!isdigit(c)) {        ungetch(c);        if(found)            ungetch((sign == -1) ? '-' : '+');        return 0;    }    for (*pn = 0; isdigit(c); c = getch())        *pn = 10 * *pn + (c - '0');    *pn *= sign;    if(c != EOF)        ungetch(c);    return c;},v
/* getint:  get next integer from input into *pn */int getint(int *pn){    int c, sign, sawsign;    while (isspace(c = getch()))   /* skip white space */        ;    if (!isdigit(c) && c != EOF && c != '+' && c != '-') {        ungetch(c);    /* it's not a number */        return 0;    }    sign = (c == '-') ? -1 : 1;    if (sawsign = (c == '+' || c == '-'))        c = getch();    if (!isdigit(c)) {        ungetch(c);        if (sawsign)            ungetch((sign == -1) ? '-' : '+');        return 0;    }    for (*pn = 0; isdigit(c); c = getch())        *pn = 10 * *pn + (c - '0');    *pn *= sign;    if (c != EOF)        ungetch(c);    return c;},V
        *pn = (sign > 0) ? '+' : '-';,V
    else,V
        *pn *= sign;,V
*pn *= sign;,v
*pn *= sign;,v
    if(*pn > 0),V
    /*for (i = 0; source[i] != '\0'; ++i)*/,v
    char source[MAXLINE];    /*getLine(source, MAXLINE);*/,v
void getLine(char s[], int lim);,v
/* getline: read a line into s, return length */void getLine(char s[], int lim){    int c, i, j;        j = 0;    for(i = 0; (c = getchar()) != EOF; ++i)    {        if(i < lim-1 && b <= 1)            s[j++] = c;    }    s[i] = '\0'; },v
    b = 0;,v
#define MAXLINE 2000,v
/* getline: read a line into s, return length */void getLine(char s[], int lim){    int c, i, j, b;        j = 0;    b = 0;    for(i = 0; (c = getchar()) != EOF; ++i)    {        if(i < lim-1 && b <= 1)            s[j++] = c;    }    s[i] = '\0'; },v
Show,v
#define BUFFSIZE 100,v
char buf[BUFFSIZE]; /* buffer for ungetch */int bufp = 0;       /* next free position in buf */,v
int getch(void);void ungetch(int c);,v
/* getch: get a (posisibly pushed back) character */int getch(void){    return (bufp > 0) ? buf[--bufp] : getchar();}/* ungetch: push character back on input */void ungetch(int c){    if (bufp >= BUFFSIZE)        printf("ungetch: too many characters\n");    else        buf[bufp++] = c;},v
06/09-2013 & 07/09-2013 =============================================,v
Arrays.cCelcius-Fahrenheit-calc.cCelFahr-Define.cCelFahr-ForLoop.cCelFahr-Reverse.cCharArrays.cCountChars.cCountChars-ver2.cCountLines.cCountLines-ver2.cCountLines-ver3.cCountLines-ver4.cDeTab.cEnTab.cFahrenheit-Celcius-calc.cFahrenheit-Celcius-calc-new.cFileCopying.cFileCopying-ver2.cFold.cFreqCharHistogram.cHelloWorld.cLongestLine.cOneWordPerLine.cPowerFunction.cPrintWordLong80.cRemoveBlanksLine.cReverseString.cTempConverter.cWordCounting.cWordsHistogram.c,v
    {,V
        output[i] = '\n';,V
 reverse2(source, output, length--, i++);,v
    printf("%d", i);,V
    printf("%d %d", i, length);,V
printf("Reversed: %s\n", reversed);,v
void reverse(char source[], char output[], int length);,v
void re,v
void reverse(char source[], char output[], int length),v
#include <stdio.h>#include <string.h> /* memset */#define MAXLINE 1000 /* maximum input line size */int getline(char line[], int maxLine);void reverse(char source[], char output[], int length);/* print longest input line */int main(){    int len;                /* current line length */    char line[MAXLINE];     /* current input line */    char reversed[MAXLINE]; /* reversed line saved here */    while((len = getline(line, MAXLINE)) > 0) {        if(len > 1)        {            printf("Original: %s", line);            memset(reversed, 0, sizeof reversed);             reverse(line, reversed, len);             printf("Reversed: %s\n", reversed);        }    }            return 0;}void reverse(char source[], char output[], int length){    int i, j;    for(i = length, j = 0; i > 0; i--)    {        if(source[i-1] != '\n')        {            output[j] = source[i-1];            ++j;        }    }}/* getline: read a line into s, return length */int getline(char s[], int lim){    int c, i, j;        j = 0;    for(i = 0; (c = getchar()) != EOF && c != '\n'; ++i)    {        if(i < lim-1)            s[j++] = c;    }    if(c == '\n') {        s[i] = c;        ++i;    }    s[i] = '\0';     return i;},v
>,v
= right) /* do nothing if array contains, fewer than 2 elements */,v
if(left >= right) /* do nothing if array contains, fewer than 2 elements */        return;,v
    void swap(int v[], int i, int j);,V
size_t size = sizeof(arr) / sizeof(int);,v
void swap(int v[], int i, int j);,v
case '?':                showTop();                break;            case '#':                duplicate();                break;            case '~':                swapItems();                break;,v
        printf("sp: %d val: %f f:%f\n", sp, val[sp-1], f);,V
    int tmp;,V
                printf("Result: %d\n", (tmp = pop() - op2));,V
    float tmp2;,V
                printf("numb: %f\n", tmp2);,V
                tmp2 = atof(s);,V
